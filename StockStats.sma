/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <ColorChat>
#include <sqlx>

#define PLUGIN "#Stock:Stats"
#define VERSION "1.1.0"
#define AUTHOR "RevCrew"

#define SQL_HOST ""
#define SQL_USER ""
#define SQL_PASS ""
#define SQL_DB	 ""

static const TABLE[] =  "StockStats"
static const PREFIX[] = "::Stock::"

#define MIN_PLAYERS 4
#define RULES_MOTD_PATH "" // РЈРєР°Р·С‹РІР°РµС‚Рµ РїСѓС‚СЊ Рє С„Р°Р№Р»Сѓ СЃ РїСЂР°РІРёР»Р°РјРё
#define MAX_TOP 15
#define IMG_SRC "http://i44.tinypic.com/w97052.png" // РїСѓС‚СЊ Рє РєР°СЂС‚РёРЅРєРµ РґР»СЏ С‚РѕРїР°

new Handle:g_Sqlx;

#define get_bit(%1,%2) 		( %1 &   1 << ( %2 & 31 ) )
#define set_bit(%1,%2)	 	( %1 |=  ( 1 << ( %2 & 31 ) ) )
#define clear_bit(%1,%2)	( %1 &= ~( 1 << ( %2 & 31 ) ) )

#define is_user_player(%0)	(get_bit(is_user_connect, %0) && (1<=%0<=g_max_players))


#define CheckLvl(%0) g_player_stats[ %0 ][LEVEL] = CorrectLevel( %0 , g_player_stats[ %0 ][EXP], g_player_stats[ %0 ][LEVEL], false, true )
// [RU] РћС‡РєРё РґР»СЏ РїРµСЂРІРѕРіРѕ СѓСЂРѕРІРЅСЏ.
const _first_exp =		20;
// [RU] РћС‡РєРё РґР»СЏ СЃР»РµРґСѓСЋС‰РµРіРѕ СѓСЂРѕРІРЅСЏ РІ (%).
const _exp_next =			25;
// [RU] РћС‡РєРё РґР»СЏ СЃР»РµРґСѓСЋС‰РµРіРѕ СѓСЂРѕРІРЅСЏ РІ (%).
const _max_lvl =			30;

new is_user_connect;
new g_max_players = 0;

enum PlayerData
{
	PD_AUTHID,
	PD_IP
}

new g_player_data[33][PlayerData][22]

enum _:PlayerStats
{
	bool:LOAD = 0,
	KILLS,
	HS,
	DEATHS,
	TIME,
	LAST,
	EXP,
	LEVEL
}

new g_player_stats[33][PlayerStats];
public plugin_init() {
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_event( "DeathMsg", "Event_DeathMsg", "a" );
	
	Settings()
	register_clcmd("say /stats", "OpenMainMenu")
	
	SQL_SetAffinity("mysql")
	g_Sqlx = SQL_MakeDbTuple(SQL_HOST,SQL_USER,SQL_PASS,SQL_DB)
}
Settings()
{
	g_max_players = get_maxplayers();
}
public plugin_natives()
{
	register_native("ss_open_menu", "OpenStatsMenu", 1);
	register_native("ss_get_stats", "_get_stats", 1);
	register_native("ss_set_stats", "_set_stats", 1);
	
	register_native("ss_get_nextlvl", "_get_nextlvl", 1);
}
public _get_nextlvl(id)
	return CorrectLevel(id,g_player_stats[id][EXP],g_player_stats[id][LEVEL], true, _)
public _get_stats(id, type)
{
	return g_player_stats[id][type];
}
public _set_stats(id, value, type)
	g_player_stats[id][type] = value;

/////////////////////////////////////////////////
/*			Player			*/
/////////////////////////////////////////////////
public client_authorized(id)
{
	ResetPlayer(id);
	
	get_user_authid(id, g_player_data[id][PD_AUTHID], charsmax(g_player_data[][]))
	get_user_ip(id, g_player_data[id][PD_IP], charsmax(g_player_data[][]), 1);
	
	if(is_user_bot(id) || is_user_hltv(id))
		return;
		
	static query[225], Data[1]; Data[0] = id;
	formatex(query, charsmax(query), "SELECT * FROM `%s` WHERE (`player_id` = '%s' OR `player_ip` = '%s')",\
	TABLE, !is_valid_authid(g_player_data[id][PD_AUTHID]) ? "ErroeSteamID" : g_player_data[id][PD_AUTHID], g_player_data[id][PD_IP])
	SQL_ThreadQuery(g_Sqlx, "QueryLoadPlayer", query, Data, 1)
}
public client_disconnect(id)
{
	static query[512], Data[1]; Data[0] = id;
		
	g_player_stats[id][TIME] += get_user_time(id);
	g_player_stats[id][LAST] = get_systime(0);
	
	static name[32];
	static name2[32];
		
	get_user_name(id, name2, 31);
	MakeStringSQLSafe(name2, name, 31)
	
	static random_str[12];
	for(new i; i<sizeof(random_str); i++)
		random_str[i] = random_num('a', 'z');
		
	random_str[sizeof(random_str)-1] = '^0';
	
	new len = formatex(query, sizeof(query) - 1, "INSERT INTO `%s` ( `player_name`, `player_id`, `player_ip`, `player_kills`, `player_hs`, `player_deaths`, `player_time`, `player_last`, `player_exp` )", \
			TABLE);
	len += formatex(query[len], charsmax(query) - len, " VALUES ( '%s', '%s', '%s', '%d' , '%d' , '%d' , '%d' , '%d', '%d'  )",\
		 name, !is_valid_authid(g_player_data[id][PD_AUTHID]) ? random_str : g_player_data[id][PD_AUTHID], g_player_data[id][PD_IP],g_player_stats[id][KILLS], g_player_stats[id][HS], g_player_stats[id][DEATHS],\
			g_player_stats[id][TIME], g_player_stats[id][LAST], g_player_stats[id][EXP])	
			
	len += formatex(query[len], charsmax(query) - len, " ON DUPLICATE KEY UPDATE `player_kills` = '%d', `player_hs` = '%d', `player_deaths` = '%d', `player_time`='%d',\
		 `player_last`='%d', `player_exp` = '%d'",\
		 g_player_stats[id][KILLS], g_player_stats[id][HS], g_player_stats[id][DEATHS],\
			g_player_stats[id][TIME], g_player_stats[id][LAST], g_player_stats[id][EXP])		

	SQL_ThreadQuery(g_Sqlx, "QuerySavePlayer", query, Data, 1)
	
	clear_bit(is_user_connect, id);
}
/////////////////////////////////////////////////
/*			Event's			*/
/////////////////////////////////////////////////

public Event_DeathMsg()
{
  	static iVictim, iKiller;
	iVictim = read_data( 2 );
	iKiller = read_data( 1 );
	
	if( !is_user_player(iVictim) || !is_user_player(iKiller) || get_playersnum() < MIN_PLAYERS)
	{
		if(is_user_player(iKiller) && get_playersnum() < MIN_PLAYERS)
		{
			client_print_color(iKiller, GREY, "^3[^4%s^3] РќСѓР¶РЅРѕ РјРёРЅРёРјСѓРј^4 %d РёРіСЂРѕРєРѕРІ^3 С‡С‚РѕР±С‹ РїРѕР»СѓС‡Р°С‚СЊ РѕРїС‹С‚",PLUGIN,MIN_PLAYERS);
		}
		return;
	}
	
	if( iKiller == iVictim || !iKiller )
		return;
		
	g_player_stats[iKiller][KILLS] ++;
	g_player_stats[iVictim][DEATHS] ++;

	if(read_data(3))
		g_player_stats[iKiller][HS] ++;
		
	g_player_stats[iKiller][EXP] ++;
	CheckLvl(iKiller);
}
//////////////////////////////////////////////////////////////////////
public OpenMainMenu(id)
{
	static menu, title[64];
	formatex(title, charsmax(title), "\w[\yStockStats\w]\r Р“Р»Р°РІРЅРѕРµ РњРµРЅСЋ")
	
	menu = menu_create(title, "HandlerMainMenu");
	MenuSetProps(menu)

	menu_additem(menu, "РўРѕРї РёРіСЂРѕРєРё [\yMOTD\w]^n", "1")	
	//menu_additem(menu, "РўРѕРї РёРіСЂРѕРєРё [\yРњРµРЅСЋ\w]^n", "2")	
	
	menu_additem(menu, "РЎС‚Р°С‚РёСЃС‚РёРєР° РёРіСЂРѕРєРѕРІ^n", "3")	
	menu_additem(menu, "РџСЂР°РІРёР»Р° РЎРµСЂРІРµСЂР°^n", "4")	
	
	menu_display(id, menu, 0)
}
public HandlerMainMenu(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		return menu_destroy(menu)
	}
	new s_Data[2], s_Name[2], i_Access, i_Callback
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	
	new uid = str_to_num(s_Data);
	
	switch (uid)
	{
		case 4: show_motd(id, RULES_MOTD_PATH, "РџСЂР°РІРёР»Р° РЎРµСЂРІРµСЂР°");
		case 3: OpenStatsMenu(id);
		case 1,2: 
		{
			static query[128];
			format(query, sizeof(query) - 1, "SELECT * FROM `%s` ORDER BY `player_kills` DESC", TABLE);
			
			static Data[2];
			Data[0] = id;
			Data[1] = uid == 1 ? 1 : 0; // Motd or Menu;
			SQL_ThreadQuery(g_Sqlx, "QueryShowTop", query, Data, 2)
		}
	}
	
	return menu_destroy(menu)
}
public OpenStatsMenu(id)
{
	static menu, title[64];
	formatex(title, charsmax(title), "\w[\yStockStats\w] Stat'С‹ РёРіСЂРѕРєР°")
	
	menu = menu_create(title, "HandlerMenu");
	MenuSetProps(menu)
	
	new p[32],c, player;
	get_players(p,c,"ch")
	
	new temp[32], s_id[3]
	for(new i; i< c; i++)
	{
		player = p[i];
		
		num_to_str(player, s_id, sizeof(s_id) - 1)
		get_user_name(player, temp, charsmax(temp))
		
		menu_additem(menu, temp, s_id)	
	}
	
	menu_display(id, menu, 0)
}
public HandlerMenu(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		return menu_destroy(menu)
	}
	new s_Data[2], s_Name[2], i_Access, i_Callback
	menu_item_getinfo(menu, item, i_Access, s_Data, charsmax(s_Data), s_Name, charsmax(s_Name), i_Callback)
	
	
	new uid = str_to_num(s_Data);
	new name[32]; get_user_name(uid, name, charsmax(name));
	
	ColorChat(id, GREY, "^3[^4%s^3] РРЅС„РѕСЂРјР°С†РёСЏ РѕР± РёРіСЂРѕРєРµ^4 %s ^3РЅР°РїРёСЃР°РЅР° РІ РІР°С€Сѓ РєРѕРЅСЃРѕР»СЊ", PLUGIN,name)
	
	console_print(id, "*******************************")
	console_print(id, "[%s] РРЅС„РѕСЂРјР°С†РёСЏ: %s",PLUGIN,name)
	console_print(id, "SteamID\IP: %s\%s",g_player_data[uid][PD_AUTHID], g_player_data[uid][PD_IP])
	
	static temp[64];
	
	console_print(id, "РРіСЂРѕРє Р°РІС‚РѕСЂРёР·РёСЂРѕРІР°Рі?: %s", g_player_stats[id][LOAD] ? "Р”Р°" : "РќРµС‚");
	console_print(id, "РЈР±РёР№СЃС‚РІР° РёРіСЂРѕРєР°: %d", g_player_stats[id][KILLS]);
	console_print(id, "РЈР±РёР№СЃС‚Р° РІ РіРѕР»РѕРІСѓ: %d", g_player_stats[id][HS]);
	console_print(id, "РЎРјРµСЂС‚Рё РёРіСЂРѕРєР°: %d", g_player_stats[id][DEATHS]);
	console_print(id, "РћРїС‹С‚ РёРіСЂРѕРєР°: %d", g_player_stats[id][EXP]);
	console_print(id, "РЈСЂРѕРІРµРЅСЊ РёРіСЂРѕРєР°: %d", g_player_stats[id][LEVEL]);
	GetTime(g_player_stats[id][TIME]/60, temp, charsmax(temp))
	console_print(id, "РћР±С‰РµРµ РІСЂРµРјСЏ(РЅР° СЃРµСЂРІРµСЂРµ): %s", temp);
	
	format_time(temp, charsmax(temp), "%m/%d/%Y - %H:%M:%S", g_player_stats[id][LAST])
	console_print(id, "Р”Р°С‚Р° РїРѕСЃР»РµРґРЅРµРіРѕ Р·Р°С…РѕРґР°: %s", temp);
	
	console_print(id, "*******************************")
	
	return menu_destroy(menu)
}
/////////////////////////////////////////////////
/*			Query'es			*/
/////////////////////////////////////////////////
public QueryLoadPlayer(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(FailState)
	{
		return SQL_Error(Query, Error, Errcode, FailState);
	}
	
	new id = Data[0];
	
	if(!is_user_player(id))
		return SQL_FreeHandle(Query);

	if(!SQL_NumResults(Query))
		return SQL_FreeHandle(Query);
	
	g_player_stats[id][LOAD] = true;
	
	g_player_stats[id][KILLS] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_kills"));
	g_player_stats[id][HS] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_hs"));
	g_player_stats[id][DEATHS] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_deaths"));
	g_player_stats[id][TIME] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_time"));
	g_player_stats[id][LAST] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_last"));
	g_player_stats[id][EXP] = SQL_ReadResult(Query, SQL_FieldNameToNum(Query,"player_exp"));
	
	g_player_stats[id][LEVEL] = CorrectLevel( id , g_player_stats[id][EXP], g_player_stats[id][LEVEL], false, false )
	
	return SQL_FreeHandle(Query);
}

public QuerySavePlayer(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(FailState)
	{
		return SQL_Error(Query, Error, Errcode, FailState);
	}
	
	return SQL_FreeHandle(Query);
}
public QueryShowTop(failstate, Handle:query, error[], errcode, data[], datasize, Float:queuetime)
{
	if(failstate)
	{
		return SQL_Error(query, error, errcode, failstate);
	}
	
	if( SQL_NumResults(query) )
	{
		new id = data[0];
		static html_motd[ 2500 ],maxtop;maxtop = 1;
		static name[32] ,totalpm;
		new len
		if( !len )
		{
			len = formatex ( html_motd [ len ], charsmax ( html_motd ) - len, "<STYLE>body{background:#808080;color:#000000;font-family:sand-serif}table{width:100%%;font-size:16px}</STYLE><table cellpadding=2 cellspacing=0 border=0>" );
			len += formatex ( html_motd [ len ], charsmax ( html_motd ) - len, "<center><img src=^"%s^"></center></img>",IMG_SRC);
			len += formatex ( html_motd [ len ], charsmax ( html_motd ) - len, "<tr align=center bgcolor=%52697B><th width=8%% align=left><font color=white>Rank: <th width=8%% align=left><font color=white>Name: <th width=8%% align=left><font color=white>Kills:" )
		}
	
		while( SQL_MoreResults(query))
		{
			if(maxtop > MAX_TOP) break;
			
			SQL_ReadResult(query,SQL_FieldNameToNum(query,"player_name"),name, sizeof(name) - 1);
			totalpm = SQL_ReadResult(query,SQL_FieldNameToNum(query,"player_kills"));
			len += formatex(html_motd [ len ], charsmax(html_motd)-len, "<tr><td>%i.</td><td>%s</td><td>%i</td></tr>", maxtop, name, totalpm);
			SQL_NextRow(query);
			maxtop ++
		}
		
		show_motd( id, html_motd, "Top Stats Players" );	
	}
	return SQL_FreeHandle(query);
}	
/////////////////////////////////////////////////
/*			Stock's			*/
/////////////////////////////////////////////////
stock CorrectLevel( id, const exp, const lvl, bool:exp_next = false, bool: reward = false )
{
	new level = 0;
	switch(exp_next)
	{
		case true: return get_next_explevel( lvl,_first_exp,_exp_next,_max_lvl )
		case false:
		{
			switch (reward)
			{
				case false:
				{
					while( exp >= get_next_explevel( level,_first_exp,_exp_next,_max_lvl ))
					{
						level += 1;
					}
					return level
				}
				case true:
				{
					level = lvl;
					while( exp >= get_next_explevel( level,_first_exp,_exp_next,_max_lvl ))
					{
						level += 1;
						CmdScreenFade(id, 1, {50,50,150}, 150)
						
						new p[32], c, player;
						get_players(p,c,"c")
						
						static name[32];
						get_user_name(id, name, 31)
						for(new i; i< c; i++)
						{
							player = p[i];
							client_print_color(player, GREY, "^3[^4%s^3] РРіСЂРѕРє^1 %s ^3 СѓСЃРїРµС€РЅРѕ Р°РїРЅСѓР» СЃРІРѕР№ СѓСЂРѕРІРµРЅСЊ РґРѕ ^4%d", PREFIX,name,level)
						}
					}
					
					return level
				}
			}
			
		}
		
	}
        
	return -1;
}
stock MakeStringSQLSafe(const input[], output[], len)
{
	copy(output, len, input);
	replace_all(output, len, "'", "*");
	replace_all(output, len, "^"", "*");
	replace_all(output, len, "`", "*");
}
stock get_next_explevel(level, fe,en,ml)
{
        if( !level)
                return fe;
               
        new g = get_next_explevel(level-1, fe,en,ml)
        
        return g + floatround((float(en)/100)*float(g), floatround_ceil)
}
stock CmdScreenFade(id, Timer, Colors[3], Alpha) 
{	
	static msg_ScreenFade
	
	if(!msg_ScreenFade)
		msg_ScreenFade = get_user_msgid("ScreenFade");
		
	message_begin(MSG_ONE_UNRELIABLE, msg_ScreenFade, _, id);
	write_short((1<<12) * 2* Timer);
	write_short(1<<12);
	write_short(0);
	write_byte(Colors[0]);
	write_byte(Colors[1]);
	write_byte(Colors[2]);
	write_byte(Alpha);
	message_end();
}
stock ResetPlayer(id)
{
	for(new i; i < sizeof(g_player_stats[]); i++)
	{
		g_player_stats[id][i] = _:0;
	}
	
	set_bit( is_user_connect, id);
}


stock SQL_Error(Handle:query, const error[], errornum, failstate)
{
	static qstring[512]
	SQL_GetQueryString(query, qstring, 1023)
	
	if(failstate == TQUERY_CONNECT_FAILED) 
	{
		log_amx("[SQLX] Error connected to database")
	} 
	else if (failstate == TQUERY_QUERY_FAILED) 
	{
		log_amx("[SQLX] Failed")
	}
	log_amx("[SQLX] Error '%s' with '%s'", error, errornum)
	log_amx("[SQLX] %s", qstring)

	return SQL_FreeHandle(query)
}
stock MenuSetProps(menu)
{
	static szText[64]
	formatex(szText, sizeof(szText) - 1, "РќР°Р·Р°Рґ")
	menu_setprop(menu, MPROP_BACKNAME, szText)
	
	formatex(szText, sizeof(szText) - 1, "Р’РїРµСЂРµРґ")
	menu_setprop(menu, MPROP_NEXTNAME, szText)
	
	formatex(szText, sizeof(szText) - 1, "Р’С‹С…РѕРґ^n\y%s", PLUGIN)
	menu_setprop(menu, MPROP_EXITNAME, szText)
	
	return 1
} 
stock GetTime(const bantime, length[], len)
{
	new minutes = bantime;
	new hours = 0;
	new days = 0;
	
	while( minutes >= 60 )
	{
		minutes -= 60;
		hours++;
	}
	
	while( hours >= 24 )
	{
		hours -= 24;
		days++;
	}
	
	new bool:add_before;
	if( minutes )
	{
		formatex(length, len, "%i РјРёРЅСѓС‚(С‹)", minutes);
		
		add_before = true;
	}
	if( hours )
	{
		if( add_before )
		{
			format(length, len, "%i С‡Р°СЃ(Р°,РѕРІ), %s", hours, length);
		}
		else
		{
			formatex(length, len, "%i С‡Р°СЃ(Р°,РѕРІ)", hours);
			
			add_before = true;
		}
	}
	if( days )
	{
		if( add_before )
		{
			format(length, len, "%i РґРµРЅСЊ(СЏ,РµР№), %s", days, length);
		}
		else
		{
			formatex(length, len, "%i РґРµРЅСЊ(СЏ,РµР№)", days);
			
			add_before = true;
		}
	}
	if( !add_before )
	{
		// minutes, hours, and days = 0
		// assume permanent ban
		copy(length, len, "Р‘Р°РЅ РЅР°РІСЃРµРіРґР°");
	}
}
stock bool: is_valid_authid( UserAuthID[] )
{
	if (equali(UserAuthID, "STEAM_ID_LAN", 0) || equali(UserAuthID, "STEAM_ID_PENDING", 0) 
	|| equali(UserAuthID, "VALVE_ID_LAN", 0) || equali(UserAuthID, "VALVE_ID_PENDING", 0) 
	|| equali(UserAuthID, "STEAM_666:88:666", 0))
	{
		return false;
	}
	
	return true;
}
